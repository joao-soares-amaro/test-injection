name: Pipeline Prod
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  release:
    types:
      - created

env:
  AWS_REGION: us-east-1
  APP_NAMESPACE: example
  APP_NAME: test-injection
  ENV_TAG: production
  # prod vars
  AWS_PROD_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
  AWS_PROD_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
  AWS_PROD_ACCOUNT_ID: ${{ secrets.AWS_PROD_ACCOUNT_ID }}
  KUBE_CONFIG_DATA: ${{ secrets.AWS_PROD_EKS_KUBE_CONFIG }}
  # dev vars
  AWS_DEV_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
  AWS_DEV_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
  AWS_DEV_ACCOUNT_ID: ${{ secrets.AWS_DEV_ACCOUNT_ID }}
  KUBE_CONFIG_DATA_DEV: ${{ secrets.AWS_DEV_EKS_KUBE_CONFIG }}
  SLACK_CHANNEL_ID: C038LF7HCTV

jobs:
  test-stage-1:
    name: Teste Stage 1
    runs-on: [tester-prod]
    timeout-minutes: 15
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.8.2

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Sonarqube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.qualitygate.wait=true


      - name: Unit tests
        run: echo --- UNIT TESTS ---

  deploy-kubernetes-dev:
    name: Deploy Kubernetes DEV
    needs: test-stage-1
    runs-on: [deployer-dev]
    timeout-minutes: 25
    outputs:
      VERSION: ${{ steps.extract_tag.outputs.tag }}
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip awscliv2.zip
          sudo ./aws/install
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract tag name
        run: echo "##[set-output name=tag;]${{ github.ref_name }}"
        id: extract_tag

      - name: Build ECR Image
        uses: smu-chile/aws-ecr-policy-action@master
        with:
          access_key_id: ${{ env.AWS_PROD_ACCESS_KEY_ID }}
          secret_access_key: ${{ env.AWS_PROD_SECRET_ACCESS_KEY }}
          ecr_registry: ${{ steps.login-ecr.outputs.registry }}
          repo: ${{ env.APP_NAME }}
          region: ${{ env.AWS_REGION }}
          tags: ${{ steps.extract_tag.outputs.tag }}
          create_repo: true
          create_policy: true
          scan_images: true
          ecr_policies: untagged:1 any:20

      - name: Create AWS ECR Policy
        run: aws ecr set-repository-policy --repository-name ${{ env.APP_NAME }} --policy-text "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"AllowDevAccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::629848764789:root\"},\"Action\":[\"ecr:GetDownloadUrlForLayer\",\"ecr:BatchGetImage\",\"ecr:BatchCheckLayerAvailability\",\"ecr:PutImage\",\"ecr:InitiateLayerUpload\",\"ecr:UploadLayerPart\",\"ecr:CompleteLayerUpload\"]}]}"

      
      - name: Replace K8s files
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.extract_tag.outputs.tag }}
        run: |
          sed -i 's|__IMAGE__|${{ env.RELEASE_IMAGE }}|g' kubernetes/*.yaml
          sed -i 's|__NAMESPACE__|${{ env.APP_NAMESPACE }}|g' kubernetes/*.yaml
          sed -i 's|__APP_NAME__|${{ env.APP_NAME }}|g' kubernetes/*.yaml
          sed -i 's|__MIN_REPLICAS__|1|g' kubernetes/*.yaml
          sed -i 's|__MAX_REPLICAS__|1|g' kubernetes/*.yaml
          sed -i 's|__ENVIRONMENT__|dev|g' kubernetes/*.yaml
          sed -i 's|__ENV_TAG__|dev|g' kubernetes/*.yaml
          sed -i 's|__DNS__|dev.amaro.pro|g' kubernetes/*.yaml
          sed -i 's|__VERSION__|${{ steps.extract_tag.outputs.tag }}|g' kubernetes/*.yaml
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubectl
        uses: ThomasKliszowski/setup-kubectl@v1
        with:
          kube-config: ${{ env.KUBE_CONFIG_DATA_DEV }}
          kube-version: 1.15.0

      - name: Create NS
        run: kubectl apply -f kubernetes/*-namespace.yaml

      - name: Create Secret
        run: kubectl create secret generic ${{ env.APP_NAME }}-secret --from-literal=password=Changepwd -n ${{ env.APP_NAMESPACE }}
        continue-on-error: true

      - name: Apply configmap to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-configmap-dev.yaml

      - name: Apply deployment to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-deployment.yaml

      - name: Apply service to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-service.yaml

      - name: Apply ingress to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-ingress.yaml

      - name: Apply HPA to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-hpa.yaml

      - name: Verify Kubernetes deployment
        timeout-minutes: 10
        run: kubectl rollout status deploy ${{ env.APP_NAME }}-deployment -n $APP_NAMESPACE

  test-stage-2: #Secundary tests
    name: Teste Stage 2
    needs: [test-stage-1, deploy-kubernetes-dev]
    runs-on: [deployer-dev]
    timeout-minutes: 10
    steps:
      - name: Integration tests
        run: echo --- RUNNING INTEGRATION TESTS ---

      - name: Stress tests
        run: echo --- RUNNING STRESS TESTS ---

  deploy-kubernetes-prod:
    name: Deploy Kubernetes PROD
    needs: test-stage-2
    runs-on: [deployer-prod]
    timeout-minutes: 15
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip awscliv2.zip
          sudo ./aws/install

      
      - name: Extract tag name
        run: echo "##[set-output name=tag;]${{ github.ref_name }}"
        id: extract_tag

      - name: Replace k8s files
        env:
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.extract_tag.outputs.tag }}
        run: |
          sed -i 's|__IMAGE__|${{ env.RELEASE_IMAGE }}|g' kubernetes/*.yaml
          sed -i 's|__NAMESPACE__|${{ env.APP_NAMESPACE }}|g' kubernetes/*.yaml
          sed -i 's|__APP_NAME__|${{ env.APP_NAME }}|g' kubernetes/*.yaml
          sed -i 's|__MIN_REPLICAS__|2|g' kubernetes/*.yaml
          sed -i 's|__MAX_REPLICAS__|10|g' kubernetes/*.yaml
          sed -i 's|__ENVIRONMENT__|prod|g' kubernetes/*.yaml
          sed -i 's|__ENV_TAG__|production|g' kubernetes/*.yaml
          sed -i 's|__DNS__|amaro.pro|g' kubernetes/*.yaml
          sed -i 's|__VERSION__|${{ steps.extract_tag.outputs.tag }}|g' kubernetes/*.yaml
      
      - name: Setup Kubectl
        uses: ThomasKliszowski/setup-kubectl@v1
        with:
          kube-config: ${{ env.KUBE_CONFIG_DATA }}
          kube-version: 1.15.0

      - name: Create NS
        run: kubectl apply -f kubernetes/*-namespace.yaml

      - name: Create Secret
        run: kubectl create secret generic ${{ env.APP_NAME }}-secret --from-literal=password=Changepwd -n ${{ env.APP_NAMESPACE }}
        continue-on-error: true

      - name: Apply configmap to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-configmap-prod.yaml

      - name: Apply deployment to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-deployment.yaml

      - name: Apply service to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-service.yaml

      - name: Apply ingress to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-ingress.yaml

      - name: Apply HPA to Kubernetes cluster
        run: kubectl apply -f kubernetes/*-hpa.yaml

      - name: Verify Kubernetes deployment
        timeout-minutes: 10
        run: kubectl rollout status deploy ${{ env.APP_NAME }}-deployment -n $APP_NAMESPACE

  slack-notification:
    name: Slack notification
    runs-on: [deployer-dev]
    needs: [test-stage-1, deploy-kubernetes-prod, test-stage-2, deploy-kubernetes-dev]
    if: always()
    steps:
      - name: Notify on Slack failure on deployment
        uses: slackapi/slack-github-action@v1.15.0
        if: needs.test-stage-1.result == 'failure' || needs.test-stage-2.result == 'failure' || needs.deploy-kubernetes-dev.result == 'failure' || needs.deploy-kubernetes-prod.result == 'failure'
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          slack-message: |
            *Erro na pipeline:*
            Erro no deploy da aplicação.
            *Aplicação:*
            ${{ env.APP_NAME }}
            *Versão:*
            ${{ needs.deploy-kubernetes-dev.outputs.VERSION  }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}


      - name: Notify Kubernetes deploy on Slack
        uses: slackapi/slack-github-action@v1.15.0
        if: needs.test-stage-1.result == 'success' && needs.deploy-kubernetes-dev.result == 'success' && needs.test-stage-2.result == 'success' && needs.deploy-kubernetes-prod.result == 'success'
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          slack-message: |
            *EKS*:
            Deploy em produção realizado, enviado por <https://github.com/${{ github.actor }}|${{ github.actor }}>
            *Aplicação*:
            ${{ env.APP_NAME }}
            *Versão*:
            ${{ needs.deploy-kubernetes-dev.outputs.VERSION }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}